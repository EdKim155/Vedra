version: '3.8'

services:
  # ===========================================================================
  # PostgreSQL Database
  # ===========================================================================
  postgres:
    image: postgres:16-alpine
    container_name: cars_bot_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-cars_bot}
      POSTGRES_USER: ${DB_USER:-cars_bot_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-cars_bot_user}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - cars_bot_network

  # ===========================================================================
  # Redis (Cache & Message Broker)
  # ===========================================================================
  redis:
    image: redis:7-alpine
    container_name: cars_bot_redis
    restart: unless-stopped
    command: redis-server --appendonly yes ${REDIS_PASSWORD:+--requirepass $REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - cars_bot_network

  # ===========================================================================
  # Telegram Bot Service (Bot API)
  # ===========================================================================
  bot:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: cars_bot
    restart: unless-stopped
    command: python -m cars_bot.bot.main
    env_file:
      - .env
    volumes:
      - ./src:/app/src:ro
      - ./secrets:/app/secrets:ro
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - cars_bot_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ===========================================================================
  # Monitor Service (Telethon - User Session)
  # ===========================================================================
  monitor:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: cars_bot_monitor
    restart: unless-stopped
    command: python -m cars_bot.monitor.main
    env_file:
      - .env
    volumes:
      - ./src:/app/src:ro
      - ./sessions:/app/sessions
      - ./secrets:/app/secrets:ro
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - cars_bot_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ===========================================================================
  # Celery Worker (AI Processing & Publishing)
  # ===========================================================================
  worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: cars_bot_worker
    restart: unless-stopped
    command: celery -A cars_bot.celery_app worker --loglevel=info --concurrency=${CELERY_WORKER_CONCURRENCY:-4}
    env_file:
      - .env
    volumes:
      - ./src:/app/src:ro
      - ./secrets:/app/secrets:ro
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - cars_bot_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ===========================================================================
  # Celery Beat (Scheduler for Periodic Tasks)
  # ===========================================================================
  beat:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: cars_bot_beat
    restart: unless-stopped
    command: celery -A cars_bot.celery_app beat --loglevel=info
    env_file:
      - .env
    volumes:
      - ./src:/app/src:ro
      - ./secrets:/app/secrets:ro
      - ./logs:/app/logs
      - celerybeat_data:/app/celerybeat
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - cars_bot_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ===========================================================================
  # Google Sheets Sync Service
  # ===========================================================================
  sheets-sync:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: cars_bot_sheets_sync
    restart: unless-stopped
    command: python -m cars_bot.sheets.sync_service
    env_file:
      - .env
    volumes:
      - ./src:/app/src:ro
      - ./secrets:/app/secrets:ro
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - cars_bot_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ===========================================================================
  # Database Migration Service (Run migrations on startup)
  # ===========================================================================
  migrate:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: cars_bot_migrate
    command: alembic upgrade head
    env_file:
      - .env
    volumes:
      - ./src:/app/src:ro
      - ./alembic:/app/alembic
      - ./alembic.ini:/app/alembic.ini
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - cars_bot_network
    restart: "no"

# =============================================================================
# Volumes
# =============================================================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  celerybeat_data:
    driver: local

# =============================================================================
# Networks
# =============================================================================
networks:
  cars_bot_network:
    driver: bridge
