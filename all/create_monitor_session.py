#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Telegram —Å–µ—Å—Å–∏–∏ –¥–ª—è Monitor.
–ó–∞–ø—É—Å–∫–∞—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ.
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, '/root/cars-bot/src')

from telethon import TelegramClient


async def create_session():
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é Telegram —Å–µ—Å—Å–∏—é –¥–ª—è Monitor."""
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –≤–∞—à–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–∏–∑ .env –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ)
    API_ID = 23897156
    API_HASH = "3a04baa30eeb6faf62c62bb356579fe4"
    SESSION_PATH = "/root/cars-bot/sessions/monitor_session.session"
    
    print("=" * 60)
    print("–°–û–ó–î–ê–ù–ò–ï TELEGRAM –°–ï–°–°–ò–ò –î–õ–Ø MONITOR")
    print("=" * 60)
    print()
    print(f"API ID: {API_ID}")
    print(f"–°–µ—Å—Å–∏—è –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: {SESSION_PATH}")
    print()
    print("‚ö†Ô∏è  –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ—Ç –∂–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞,")
    print("   –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–æ–≤!")
    print()
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
    client = TelegramClient(SESSION_PATH, API_ID, API_HASH)
    
    try:
        print("üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram...")
        await client.connect()
        
        if not await client.is_user_authorized():
            print()
            print("üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ +79991234567):")
            phone = input("   –¢–µ–ª–µ—Ñ–æ–Ω: ").strip()
            
            if not phone:
                print("‚ùå –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –≤–≤–µ–¥–µ–Ω!")
                return False
            
            print()
            print("üì® –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...")
            await client.send_code_request(phone)
            
            print()
            print("üí¨ –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ Telegram (5 —Ü–∏—Ñ—Ä):")
            code = input("   –ö–æ–¥: ").strip()
            
            if not code:
                print("‚ùå –ö–æ–¥ –Ω–µ –≤–≤–µ–¥–µ–Ω!")
                return False
            
            try:
                print()
                print("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...")
                await client.sign_in(phone, code)
                
            except Exception as e:
                if "Two-steps verification" in str(e) or "password" in str(e).lower():
                    print()
                    print("üîí –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:")
                    password = input("   –ü–∞—Ä–æ–ª—å: ").strip()
                    
                    if not password:
                        print("‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ –≤–≤–µ–¥–µ–Ω!")
                        return False
                    
                    print()
                    print("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å –ø–∞—Ä–æ–ª–µ–º...")
                    await client.sign_in(password=password)
                else:
                    raise
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        me = await client.get_me()
        print()
        print("=" * 60)
        print("‚úÖ –°–ï–°–°–ò–Ø –£–°–ü–ï–®–ù–û –°–û–ó–î–ê–ù–ê!")
        print("=" * 60)
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {me.first_name} {me.last_name or ''}")
        print(f"Username: @{me.username}")
        print(f"ID: {me.id}")
        print(f"–¢–µ–ª–µ—Ñ–æ–Ω: {me.phone}")
        print()
        print(f"üìÅ –°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {SESSION_PATH}")
        print()
        
        return True
        
    except Exception as e:
        print()
        print("=" * 60)
        print("‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –°–û–ó–î–ê–ù–ò–ò –°–ï–°–°–ò–ò")
        print("=" * 60)
        print(f"–û—à–∏–±–∫–∞: {e}")
        print()
        import traceback
        traceback.print_exc()
        return False
        
    finally:
        await client.disconnect()


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    try:
        success = asyncio.run(create_session())
        
        if success:
            print()
            print("üöÄ –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥:")
            print("   supervisorctl restart carsbot:cars-monitor")
            print()
            sys.exit(0)
        else:
            print()
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é")
            print("   –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑: python create_monitor_session.py")
            print()
            sys.exit(1)
            
    except KeyboardInterrupt:
        print()
        print("‚ö†Ô∏è  –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print()
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()

