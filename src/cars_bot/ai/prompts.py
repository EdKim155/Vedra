"""
Optimized prompts for AI processing using OpenAI best practices (2025).

All prompts are designed to:
- Minimize token usage while maintaining clarity
- Use structured outputs with JSON Schema
- Provide clear, unambiguous instructions
- Include few-shot examples where beneficial
- Support Russian language content
- Leverage system/user roles effectively
"""

from typing import Final

# =============================================================================
# CLASSIFICATION PROMPTS
# =============================================================================

CLASSIFY_POST_SYSTEM_PROMPT: Final[str] = """–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤ –∏–∑ Telegram-–∫–∞–Ω–∞–ª–æ–≤ –æ –ø—Ä–æ–¥–∞–∂–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π.

–ó–ê–î–ê–ß–ê: –û–ø—Ä–µ–¥–µ–ª–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ—Å—Ç –ü–†–û–î–ê–Æ–©–ò–ú –û–ë–™–Ø–í–õ–ï–ù–ò–ï–ú –æ –ø—Ä–æ–¥–∞–∂–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è.

–ö–†–ò–¢–ï–†–ò–ò –ø—Ä–æ–¥–∞—é—â–µ–≥–æ –ø–æ—Å—Ç–∞ (–≤—Å–µ –∏–ª–∏ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –¥–æ–ª–∂–Ω—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å):
‚úì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ (–º–∞—Ä–∫–∞, –º–æ–¥–µ–ª—å, –≥–æ–¥)
‚úì –¶–µ–Ω–∞ –∏–ª–∏ —è–≤–Ω–æ–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –ø—Ä–æ–¥–∞—Ç—å ("–ø—Ä–æ–¥–∞–º", "–≤ –ø—Ä–æ–¥–∞–∂–µ")
‚úì –ö–æ–Ω—Ç–∞–∫—Ç—ã –ø—Ä–æ–¥–∞–≤—Ü–∞ (username, —Ç–µ–ª–µ—Ñ–æ–Ω, "–ø–∏—à–∏—Ç–µ –≤ –õ–°")
‚úì –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–ª–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∞–≤—Ç–æ

–ù–ï –ø—Ä–æ–¥–∞—é—â–∏–µ –ø–æ—Å—Ç—ã:
‚úó –ù–æ–≤–æ—Å—Ç–∏ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª—è—Ö
‚úó –û–±—â–∏–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è –∏ –º–Ω–µ–Ω–∏—è
‚úó –í–æ–ø—Ä–æ—Å—ã –æ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π ("–ø–æ—Å–æ–≤–µ—Ç—É–π—Ç–µ", "–∫—Ç–æ –∑–Ω–∞–µ—Ç")
‚úó –†–µ–∫–ª–∞–º–∞ –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å–æ–≤/–∑–∞–ø—á–∞—Å—Ç–µ–π
‚úó –†–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç (–º–µ–º—ã, –≤–∏–¥–µ–æ)

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê - —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–π JSON:
{
  "is_selling_post": boolean,
  "confidence": float (0.0-1.0),
  "reasoning": string (–∫—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º, 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
}"""

CLASSIFY_POST_USER_PROMPT_TEMPLATE: Final[str] = """–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–π —ç—Ç–æ—Ç –ø–æ—Å—Ç:

{text}

–Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø—Ä–æ–¥–∞—é—â–∏–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ–º –æ –ø—Ä–æ–¥–∞–∂–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è?"""

# Few-shot examples for classification (used in processor for better results)
CLASSIFICATION_FEW_SHOT_EXAMPLES: Final[list[dict]] = [
    {
        "user": "–ü—Ä–æ–¥–∞–º BMW 3 —Å–µ—Ä–∏–∏ 2008 –≥–æ–¥–∞, 2.5 –∞–≤—Ç–æ–º–∞—Ç. –ü—Ä–æ–±–µ–≥ 150–∫, 2 –≤–ª–∞–¥–µ–ª—å—Ü–∞, –∑–µ–ª–µ–Ω–∞—è –∞–≤—Ç–æ—Ç–µ–∫–∞. –ü–æ–ª–Ω–∞—è –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è, –∫–æ–∂–∞, –ø–∞–Ω–æ—Ä–∞–º–∞. –¶–µ–Ω–∞ 850 —Ç—ã—Å—è—á —Ä—É–±–ª–µ–π, —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ—Ä–≥. –ü–∏—à–∏—Ç–µ –≤ –õ–° @seller123",
        "assistant": '{"is_selling_post": true, "confidence": 0.98, "reasoning": "–ü–æ–ª–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–¥–∞–∂–µ: –µ—Å—Ç—å –º–∞—Ä–∫–∞, –º–æ–¥–µ–ª—å, –≥–æ–¥, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏, —Ü–µ–Ω–∞ –∏ –∫–æ–Ω—Ç–∞–∫—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞"}',
    },
    {
        "user": "–ö—Ç–æ –∑–Ω–∞–µ—Ç —Ö–æ—Ä–æ—à–∏–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–µ–º–æ–Ω—Ç–∞ BMW –≤ –ú–æ—Å–∫–≤–µ? –ù—É–∂–Ω—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–æ—Ä–æ–±–∫–µ –∞–≤—Ç–æ–º–∞—Ç.",
        "assistant": '{"is_selling_post": false, "confidence": 0.95, "reasoning": "–≠—Ç–æ –≤–æ–ø—Ä–æ—Å-–∑–∞–ø—Ä–æ—Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —Ä–µ–º–æ–Ω—Ç—É, –∞ –Ω–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–¥–∞–∂–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è"}',
    },
    {
        "user": "üî• –°–†–û–ß–ù–û! Toyota Camry 2015, 2.5L, –ø—Ä–æ–±–µ–≥ 120–∫. –û–¥–∏–Ω —Ö–æ–∑—è–∏–Ω, –±–µ–∑ –î–¢–ü. 1.2 –º–ª–Ω. –¢–µ–ª: +79991234567",
        "assistant": '{"is_selling_post": true, "confidence": 0.99, "reasoning": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ —Å—Ä–æ—á–Ω–æ–π –ø—Ä–æ–¥–∞–∂–µ —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏: –∞–≤—Ç–æ, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏, —Ü–µ–Ω–∞, —Ç–µ–ª–µ—Ñ–æ–Ω"}',
    },
]

# =============================================================================
# EXTRACTION PROMPTS
# =============================================================================

EXTRACT_DATA_SYSTEM_PROMPT: Final[str] = """–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—é —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ –ø—Ä–æ–¥–∞–∂–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.

–ó–ê–î–ê–ß–ê: –ò–∑–≤–ª–µ–∫–∏ –í–°–ï –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ò—Å–ø–æ–ª—å–∑—É–π null –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª–µ–π.

–ü–†–ê–í–ò–õ–ê –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø:
‚Ä¢ brand - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä–∫–∏ (BMW, Toyota, Mercedes-Benz, Lada, –∏ —Ç.–¥.)
‚Ä¢ model - –º–æ–¥–µ–ª—å –∫–∞–∫ –Ω–∞–ø–∏—Å–∞–Ω–∞ (3 —Å–µ—Ä–∏–∏, Camry, E-Class, Vesta)
‚Ä¢ engine_volume - —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ (2.0, 1.6, 3.5)
‚Ä¢ transmission - —Å—Ç—Ä–æ–≥–æ: automatic, manual, robot, variator
‚Ä¢ year - 4 —Ü–∏—Ñ—Ä—ã (1980-2030)
‚Ä¢ owners_count - —á–∏—Å–ª–æ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ)
‚Ä¢ mileage - –ø—Ä–æ–±–µ–≥ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ "–∫–º")
‚Ä¢ autoteka_status - —Å—Ç—Ä–æ–≥–æ: green, has_accidents, unknown
‚Ä¢ equipment - –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏ –∏ –æ–ø—Ü–∏–π
‚Ä¢ price - —Ü–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤)
‚Ä¢ market_price - —Ä—ã–Ω–æ—á–Ω–∞—è —Ü–µ–Ω–∞ –µ—Å–ª–∏ —É–ø–æ–º—è–Ω—É—Ç–∞ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ)
‚Ä¢ price_justification - –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã –µ—Å–ª–∏ –µ—Å—Ç—å

–û–°–û–ë–ï–ù–ù–û–°–¢–ò:
- –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–π "–ê–ö–ü–ü", "–∞–≤—Ç–æ–º–∞—Ç" ‚Üí automatic
- –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–π "–ú–ö–ü–ü", "–º–µ—Ö–∞–Ω–∏–∫–∞" ‚Üí manual
- –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–π "–∑–µ–ª–µ–Ω–∞—è –∞–≤—Ç–æ—Ç–µ–∫–∞", "–±–µ–∑ –î–¢–ü" ‚Üí green
- –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–π "–µ—Å—Ç—å –î–¢–ü", "–±–∏—Ç–∞—è" ‚Üí has_accidents
- –ò–∑–≤–ª–µ–∫–∞–π —á–∏—Å–ª–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞: "850 —Ç—ã—Å—è—á" ‚Üí 850000

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê - —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–π JSON —Å–æ –≤—Å–µ–º–∏ –ø–æ–ª—è–º–∏."""

EXTRACT_DATA_USER_PROMPT_TEMPLATE: Final[str] = """–ò–∑–≤–ª–µ–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —ç—Ç–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:

{text}

–í–µ—Ä–Ω–∏ –ø–æ–ª–Ω—ã–π JSON —Å–æ –≤—Å–µ–º–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –ø–æ–ª—è–º–∏."""

# Few-shot examples for extraction
EXTRACTION_FEW_SHOT_EXAMPLES: Final[list[dict]] = [
    {
        "user": "–ü—Ä–æ–¥–∞–º BMW 3 —Å–µ—Ä–∏–∏ 2.5 –ê–≤—Ç–æ–º–∞—Ç 2008. –ü—Ä–æ–±–µ–≥ 150 —Ç—ã—Å—è—á –∫–º, 2 –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø–æ –ü–¢–°. –ó–µ–ª–µ–Ω–∞—è –∞–≤—Ç–æ—Ç–µ–∫–∞. –ü–æ–ª–Ω–∞—è –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è, –∫–æ–∂–∞, –ø–∞–Ω–æ—Ä–∞–º–∞. –¶–µ–Ω–∞ 850 —Ç—ã—Å—è—á —Ä—É–±–ª–µ–π, —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ—Ä–≥.",
        "assistant": """{
  "brand": "BMW",
  "model": "3 —Å–µ—Ä–∏–∏",
  "engine_volume": "2.5",
  "transmission": "automatic",
  "year": 2008,
  "owners_count": 2,
  "mileage": 150000,
  "autoteka_status": "green",
  "equipment": "–ü–æ–ª–Ω–∞—è –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è, –∫–æ–∂–∞–Ω—ã–π —Å–∞–ª–æ–Ω, –ø–∞–Ω–æ—Ä–∞–º–Ω–∞—è –∫—Ä—ã—à–∞",
  "price": 850000,
  "market_price": null,
  "price_justification": "–†–µ–∞–ª—å–Ω—ã–π —Ç–æ—Ä–≥ —É–º–µ—Å—Ç–µ–Ω"
}""",
    },
]

# =============================================================================
# GENERATION PROMPTS
# =============================================================================

GENERATE_DESCRIPTION_SYSTEM_PROMPT: Final[str] = """–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö –æ –ø—Ä–æ–¥–∞–∂–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π.

–ó–ê–î–ê–ß–ê: –ü–µ—Ä–µ–ø–∏—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–¥–∞–∂–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –£–ù–ò–ö–ê–õ–¨–ù–´–ú —Å—Ç–∏–ª–µ–º, —Å–æ—Ö—Ä–∞–Ω—è—è –í–°–ï –∫–ª—é—á–µ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ.

–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
1. –ò—Å–ø–æ–ª—å–∑—É–π –ü–û–õ–ù–û–°–¢–¨–Æ –¥—Ä—É–≥–∏–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ (–¥–ª—è –∞–Ω—Ç–∏–ø–ª–∞–≥–∏–∞—Ç–∞ >80%)
2. –°–æ—Ö—Ä–∞–Ω–∏ –í–°–ï —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ:
   ‚úì –ú–∞—Ä–∫–∞, –º–æ–¥–µ–ª—å, –≥–æ–¥, –¥–≤–∏–≥–∞—Ç–µ–ª—å, —Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è
   ‚úì –ü—Ä–æ–±–µ–≥, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤, —Å–æ—Å—Ç–æ—è–Ω–∏–µ
   ‚úì –¶–µ–Ω–∞ –∏ –µ—ë –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ
   ‚úì –ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏
3. –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Ç–æ–Ω (–Ω–µ –ø—Ä–æ–º–æ!)
4. –•–æ—Ä–æ—à–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –∞–±–∑–∞—Ü–∞–º–∏
5. –î–ª–∏–Ω–∞: 100-500 —Å–ª–æ–≤
6. –Ø–∑—ã–∫: —Ä—É—Å—Å–∫–∏–π

–°–¢–†–£–ö–¢–£–†–ê –¢–ï–ö–°–¢–ê:
- –ü–µ—Ä–≤—ã–π –∞–±–∑–∞—Ü: –∫—Ä–∞—Ç–∫–∞—è –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –∞–≤—Ç–æ
- –í—Ç–æ—Ä–æ–π –∞–±–∑–∞—Ü: —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏ –∏—Å—Ç–æ—Ä–∏—è
- –¢—Ä–µ—Ç–∏–π –∞–±–∑–∞—Ü: –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏
- –ß–µ—Ç–≤–µ—Ä—Ç—ã–π –∞–±–∑–∞—Ü: —Ü–µ–Ω–∞ –∏ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ

–ó–ê–ü–†–ï–©–ï–ù–û:
‚úó –î–æ–±–∞–≤–ª—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä–æ–π –Ω–µ—Ç –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ
‚úó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —á—Ä–µ–∑–º–µ—Ä–Ω–æ —Ä–µ–∫–ª–∞–º–Ω—ã–π —Å—Ç–∏–ª—å
‚úó –í–∫–ª—é—á–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã (–æ–Ω–∏ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ)
‚úó –ü–∏—Å–∞—Ç—å –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞ ("—è –ø—Ä–æ–¥–∞—é")
‚úó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç–º–æ–¥–∑–∏

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê - —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–π JSON:
{
  "generated_text": "–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è...",
  "key_points_preserved": ["BMW 3 —Å–µ—Ä–∏–∏ 2008", "–ü—Ä–æ–±–µ–≥ 150000 –∫–º", "–¶–µ–Ω–∞ 850000 —Ä—É–±"],
  "tone": "professional"
}"""

GENERATE_DESCRIPTION_USER_PROMPT_TEMPLATE: Final[str] = """–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:
{original_text}

–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:
{car_data_json}

–ü–µ—Ä–µ–ø–∏—à–∏ —ç—Ç–æ –∫–∞–∫ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, —Å–æ—Ö—Ä–∞–Ω–∏–≤ –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç—ã."""

# Few-shot examples for generation
GENERATION_FEW_SHOT_EXAMPLES: Final[list[dict]] = [
    {
        "user": """–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:
–ü—Ä–æ–¥–∞–º BMW 3 —Å–µ—Ä–∏–∏ 2008 –≥–æ–¥–∞, 2.5 –∞–≤—Ç–æ–º–∞—Ç. –ü—Ä–æ–±–µ–≥ 150–∫, 2 –≤–ª–∞–¥–µ–ª—å—Ü–∞, –∑–µ–ª–µ–Ω–∞—è –∞–≤—Ç–æ—Ç–µ–∫–∞. –¶–µ–Ω–∞ 850–∫.

–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:
{"brand": "BMW", "model": "3 —Å–µ—Ä–∏–∏", "year": 2008, "engine_volume": "2.5", "transmission": "automatic", "mileage": 150000, "owners_count": 2, "autoteka_status": "green", "price": 850000}""",
        "assistant": """{
  "generated_text": "–ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ–º –∫ –ø—Ä–æ–¥–∞–∂–µ —Å–µ–¥–∞–Ω BMW —Ç—Ä–µ—Ç—å–µ–π —Å–µ—Ä–∏–∏ 2008 –≥–æ–¥–∞ –≤—ã–ø—É—Å–∫–∞. –ê–≤—Ç–æ–º–æ–±–∏–ª—å –æ—Å–Ω–∞—â–µ–Ω –¥–≤–∏–≥–∞—Ç–µ–ª–µ–º –æ–±—ä–µ–º–æ–º 2.5 –ª–∏—Ç—Ä–∞ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–æ—Ä–æ–±–∫–æ–π –ø–µ—Ä–µ–¥–∞—á.\\n\\n–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ. –ü—Ä–æ–±–µ–≥ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 150 —Ç—ã—Å—è—á –∫–∏–ª–æ–º–µ—Ç—Ä–æ–≤. –ü–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º —á–∏—Å–ª–∏—Ç—Å—è –¥–≤–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞. –°–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–æ–≤–µ—Ä–∫–µ –ê–≤—Ç–æ—Ç–µ–∫–∏, –∏—Å—Ç–æ—Ä–∏—è —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ —á–∏—Å—Ç–∞—è, –±–µ–∑ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–æ—Ä–æ–∂–Ω–æ-—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö –ø—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏–π.\\n\\n–°—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 850 —Ç—ã—Å—è—á —Ä—É–±–ª–µ–π. –¶–µ–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—É—â–µ–º—É —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é –∏ —Ä—ã–Ω–æ—á–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏.",
  "key_points_preserved": [
    "BMW 3 —Å–µ—Ä–∏–∏ 2008 –≥–æ–¥–∞",
    "–î–≤–∏–≥–∞—Ç–µ–ª—å 2.5 –ª–∏—Ç—Ä–∞",
    "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è",
    "–ü—Ä–æ–±–µ–≥ 150000 –∫–º",
    "2 –≤–ª–∞–¥–µ–ª—å—Ü–∞",
    "–ß–∏—Å—Ç–∞—è –∏—Å—Ç–æ—Ä–∏—è (–∑–µ–ª–µ–Ω–∞—è –∞–≤—Ç–æ—Ç–µ–∫–∞)",
    "–¶–µ–Ω–∞ 850000 —Ä—É–±–ª–µ–π"
  ],
  "tone": "professional"
}""",
    },
]

# =============================================================================
# VALIDATION PROMPTS (Optional)
# =============================================================================

VALIDATION_SYSTEM_PROMPT: Final[str] = """–¢—ã –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ –ø—Ä–æ–¥–∞–∂–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π.

–ó–ê–î–ê–ß–ê: –ü—Ä–æ–≤–µ—Ä—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏ –ø–æ–ª–Ω–æ—Ç—É –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.

–ü–†–ê–í–ò–õ–ê –í–ê–õ–ò–î–ê–¶–ò–ò:
‚Ä¢ brand/model - –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –º–∞—Ä–∫–∞–º–∏ –∏ –º–æ–¥–µ–ª—è–º–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
‚Ä¢ year - —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –≥–æ–¥ (1980-2030)
‚Ä¢ price - —Ä–∞–∑—É–º–Ω–∞—è —Ü–µ–Ω–∞ (50,000 - 50,000,000 —Ä—É–±–ª–µ–π)
‚Ä¢ mileage - –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≥–æ–¥—É (—Å—Ä–µ–¥–Ω–∏–π –ø—Ä–æ–±–µ–≥ ~15,000 –∫–º/–≥–æ–¥)
‚Ä¢ transmission - —Ç–æ–ª—å–∫–æ: automatic, manual, robot, variator
‚Ä¢ autoteka_status - —Ç–æ–ª—å–∫–æ: green, has_accidents, unknown

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê - —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–π JSON:
{
  "is_valid": boolean,
  "issues": [—Å–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º –µ—Å–ª–∏ –µ—Å—Ç—å],
  "completeness_score": float (0.0-1.0)
}"""

VALIDATION_USER_PROMPT_TEMPLATE: Final[str] = """–ü—Ä–æ–≤–∞–ª–∏–¥–∏—Ä—É–π —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:

{car_data_json}

–ü—Ä–æ–≤–µ—Ä—å –Ω–∞ –æ—à–∏–±–∫–∏ –∏ –ø–æ–ª–Ω–æ—Ç—É."""


# =============================================================================
# HELPER FUNCTIONS FOR PROMPT CONSTRUCTION
# =============================================================================

def build_classification_prompt(
    text: str,
    use_few_shot: bool = False,
) -> tuple[str, str]:
    """
    Build classification prompt with system and user messages.
    
    Args:
        text: Post text to classify
        use_few_shot: Whether to include few-shot examples (increases tokens but improves accuracy)
    
    Returns:
        Tuple of (system_prompt, user_prompt)
    
    Note:
        Few-shot examples can improve accuracy by ~5-10% but increase token usage.
        For production, consider using few-shot only for edge cases or lower confidence.
    """
    # Truncate text to prevent excessive token usage (keep first 2000 chars)
    truncated_text = text[:2000] if len(text) > 2000 else text
    
    user_prompt = CLASSIFY_POST_USER_PROMPT_TEMPLATE.format(text=truncated_text)
    
    # Few-shot examples are added in processor if needed
    return (CLASSIFY_POST_SYSTEM_PROMPT, user_prompt)


def build_extraction_prompt(
    text: str,
    use_few_shot: bool = False,
) -> tuple[str, str]:
    """
    Build extraction prompt with system and user messages.
    
    Args:
        text: Post text to extract data from
        use_few_shot: Whether to include few-shot examples
    
    Returns:
        Tuple of (system_prompt, user_prompt)
    
    Note:
        Extraction works well without few-shot due to clear field definitions.
        Enable few-shot only if extraction accuracy is below target.
    """
    # Truncate text (keep first 3000 chars for extraction - need more context)
    truncated_text = text[:3000] if len(text) > 3000 else text
    
    user_prompt = EXTRACT_DATA_USER_PROMPT_TEMPLATE.format(text=truncated_text)
    
    return (EXTRACT_DATA_SYSTEM_PROMPT, user_prompt)


def build_generation_prompt(
    original_text: str,
    car_data_json: str,
    use_few_shot: bool = False,
) -> tuple[str, str]:
    """
    Build generation prompt with system and user messages.
    
    Args:
        original_text: Original advertisement text
        car_data_json: JSON string of extracted car data
        use_few_shot: Whether to include few-shot examples
    
    Returns:
        Tuple of (system_prompt, user_prompt)
    
    Note:
        Generation benefits most from few-shot examples as it sets tone and style.
        Consider enabling few-shot for generation to ensure consistent quality.
    """
    # Truncate to prevent excessive tokens
    truncated_original = original_text[:2000] if len(original_text) > 2000 else original_text
    truncated_json = car_data_json[:1000] if len(car_data_json) > 1000 else car_data_json
    
    user_prompt = GENERATE_DESCRIPTION_USER_PROMPT_TEMPLATE.format(
        original_text=truncated_original,
        car_data_json=truncated_json,
    )
    
    return (GENERATE_DESCRIPTION_SYSTEM_PROMPT, user_prompt)


def build_validation_prompt(car_data_json: str) -> tuple[str, str]:
    """
    Build validation prompt with system and user messages.
    
    Args:
        car_data_json: JSON string of extracted car data
    
    Returns:
        Tuple of (system_prompt, user_prompt)
    
    Note:
        Validation is optional. Use only if you need extra quality assurance
        before publishing. Adds extra API call and cost.
    """
    user_prompt = VALIDATION_USER_PROMPT_TEMPLATE.format(car_data_json=car_data_json)
    
    return (VALIDATION_SYSTEM_PROMPT, user_prompt)


# =============================================================================
# PROMPT ENGINEERING NOTES & TOKEN OPTIMIZATION
# =============================================================================

"""
PROMPT ENGINEERING BEST PRACTICES (2025):

1. **System Role Clarity**
   - Clear persona and expertise definition
   - Explicit task description
   - Strict output format requirements

2. **Structured Outputs**
   - Use OpenAI's parse() method with Pydantic models
   - Provides automatic JSON schema validation
   - Reduces parsing errors and improves reliability

3. **Russian Language Optimization**
   - Direct instructions in Russian (no translation overhead)
   - Cultural context (e.g., "–∞–≤—Ç–æ—Ç–µ–∫–∞", "–ê–ö–ü–ü", "–ü–¢–°")
   - Local units (rubles, kilometers)

4. **Few-Shot Examples**
   - Classification: Optional (clear rules work well)
   - Extraction: Optional (structured fields are self-explanatory)
   - Generation: Recommended (establishes tone and style)

5. **Token Optimization**
   - Concise but clear instructions
   - Visual structure (bullets, sections)
   - Text truncation to prevent excessive input
   - No redundant explanations

6. **Error Handling**
   - Explicit null handling for missing data
   - Validation rules in prompt
   - Clear constraints (ranges, enums)

TOKEN USAGE ESTIMATES (GPT-4o-mini):

‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ Operation       ‚îÇ System Tokens‚îÇ Input Tokens ‚îÇ Output Tokens‚îÇ Total Tokens ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ Classification  ‚îÇ ~200         ‚îÇ ~200-400     ‚îÇ ~100        ‚îÇ ~500-700     ‚îÇ
‚îÇ Extraction      ‚îÇ ~300         ‚îÇ ~300-600     ‚îÇ ~300-400    ‚îÇ ~900-1300    ‚îÇ
‚îÇ Generation      ‚îÇ ~400         ‚îÇ ~400-700     ‚îÇ ~500-800    ‚îÇ ~1300-1900   ‚îÇ
‚îÇ Validation      ‚îÇ ~150         ‚îÇ ~200-300     ‚îÇ ~100        ‚îÇ ~450-550     ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

TOTAL PER POST (Classification + Extraction + Generation):
- Tokens: ~2,700-3,900
- Cost (GPT-4o-mini): ~$0.002-0.003 per post
- Cost (GPT-4o): ~$0.027-0.039 per post

OPTIMIZATION RECOMMENDATIONS:

1. **For High Volume (>1000 posts/day):**
   - Use GPT-4o-mini for classification and extraction
   - Use GPT-4o only for generation (better quality)
   - Skip validation (rely on Pydantic validation)
   - Disable few-shot examples

2. **For Quality Priority:**
   - Use GPT-4o for all operations
   - Enable few-shot for generation
   - Enable validation for critical posts
   - Consider batch processing for efficiency

3. **Balanced Approach (Recommended):**
   - GPT-4o-mini for all operations
   - Few-shot only for generation
   - Skip validation (use Pydantic + business logic)
   - Text truncation: 2000/3000/2000 chars

EXPECTED ACCURACY:

‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ Operation       ‚îÇ GPT-4o-mini  ‚îÇ GPT-4o       ‚îÇ With Few-Shot‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ Classification  ‚îÇ ~93-95%      ‚îÇ ~96-98%      ‚îÇ +2-3%        ‚îÇ
‚îÇ Extraction      ‚îÇ ~88-92%      ‚îÇ ~93-96%      ‚îÇ +1-2%        ‚îÇ
‚îÇ Generation      ‚îÇ ~85-90%      ‚îÇ ~92-95%      ‚îÇ +3-5%        ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

Note: Accuracy depends on post quality and completeness.
"""

